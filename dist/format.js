"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _winston = require("winston");

var _winston2 = _interopRequireDefault(_winston);

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FormatLogger {
  constructor(params) {
    this.logger = params.logger;
    this.logger.logMessageFormat = this.logMessageFormat.bind(this);
    this.format = params.format;
    this.appName = params.appName;
    this.debugContext = params.debugContext;
  }

  filterContext() {
    var _this = this;

    return _winston2.default.format(function (info, opts) {
      if (_this.debugContext !== null && info.context !== _this.debugContext) {
        return false;
      }

      return info;
    })();
  }

  simpleBaseFormat() {
    const base = _winston2.default.format.printf(function (info) {
      const string = `${(0, _moment2.default)(info.timestamp)} [${info.app}] ${info.context ? `[context: ${info.context}]}` : ""} ${info.level}: ${info.message}`;

      if (info.data) {
        return `${string} ${JSON.stringify(info.data)}`;
      }

      return string;
    });

    return _winston2.default.format.combine(_winston2.default.format.timestamp(), base);
  }

  logMessageFormat(message, data, context) {
    let logMessage = {
      app: this.appName,
      message: message
    };

    if (data) {
      logMessage.data = data;
    }

    if (context) {
      logMessage.context = context;
    }

    return logMessage;
  }

  setFormat() {
    const simpleBase = this.simpleBaseFormat();
    const filterContext = this.filterContext();

    switch (this.format) {
      case "json":
        this.logger.add(new _winston2.default.transports.Console({
          format: _winston2.default.format.combine(this.filterContext(), _winston2.default.format.timestamp(), _winston2.default.format.json())
        }));

        break;
      case "simple":
        this.logger.add(new _winston2.default.transports.Console({
          format: _winston2.default.format.combine(this.filterContext(), _winston2.default.format.colorize(), _winston2.default.format.simple(), simpleBase)
        }));

        break;
      default:
        this.logger.add(new _winston2.default.transports.Console({
          format: _winston2.default.format.combine(this.filterContext(), _winston2.default.format.colorize(), _winston2.default.format.simple(), simpleBase)
        }));
    }
  }
}

exports.default = FormatLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mb3JtYXQuanMiXSwibmFtZXMiOlsiRm9ybWF0TG9nZ2VyIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJsb2dnZXIiLCJsb2dNZXNzYWdlRm9ybWF0IiwiYmluZCIsImZvcm1hdCIsImFwcE5hbWUiLCJkZWJ1Z0NvbnRleHQiLCJmaWx0ZXJDb250ZXh0Iiwid2luc3RvbiIsImluZm8iLCJvcHRzIiwiY29udGV4dCIsInNpbXBsZUJhc2VGb3JtYXQiLCJiYXNlIiwicHJpbnRmIiwic3RyaW5nIiwidGltZXN0YW1wIiwiYXBwIiwibGV2ZWwiLCJtZXNzYWdlIiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb21iaW5lIiwibG9nTWVzc2FnZSIsInNldEZvcm1hdCIsInNpbXBsZUJhc2UiLCJhZGQiLCJ0cmFuc3BvcnRzIiwiQ29uc29sZSIsImpzb24iLCJjb2xvcml6ZSIsInNpbXBsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsWUFBTixDQUFtQjtBQUNqQkMsY0FBWUMsTUFBWixFQUFvQjtBQUNsQixTQUFLQyxNQUFMLEdBQWNELE9BQU9DLE1BQXJCO0FBQ0EsU0FBS0EsTUFBTCxDQUFZQyxnQkFBWixHQUErQixLQUFLQSxnQkFBTCxDQUFzQkMsSUFBdEIsQ0FBMkIsSUFBM0IsQ0FBL0I7QUFDQSxTQUFLQyxNQUFMLEdBQWNKLE9BQU9JLE1BQXJCO0FBQ0EsU0FBS0MsT0FBTCxHQUFlTCxPQUFPSyxPQUF0QjtBQUNBLFNBQUtDLFlBQUwsR0FBb0JOLE9BQU9NLFlBQTNCO0FBQ0Q7O0FBRURDLGtCQUFnQjtBQUFBOztBQUNkLFdBQU9DLGtCQUFRSixNQUFSLENBQWUsVUFBQ0ssSUFBRCxFQUFPQyxJQUFQLEVBQWdCO0FBQ3BDLFVBQUksTUFBS0osWUFBTCxLQUFzQixJQUF0QixJQUE4QkcsS0FBS0UsT0FBTCxLQUFpQixNQUFLTCxZQUF4RCxFQUFzRTtBQUNwRSxlQUFPLEtBQVA7QUFDRDs7QUFFRCxhQUFPRyxJQUFQO0FBQ0QsS0FOTSxHQUFQO0FBT0Q7O0FBRURHLHFCQUFtQjtBQUNqQixVQUFNQyxPQUFPTCxrQkFBUUosTUFBUixDQUFlVSxNQUFmLENBQXNCLGdCQUFRO0FBQ3pDLFlBQU1DLFNBQVUsR0FBRSxzQkFBT04sS0FBS08sU0FBWixDQUF1QixLQUFJUCxLQUFLUSxHQUFJLEtBQ3BEUixLQUFLRSxPQUFMLEdBQWdCLGFBQVlGLEtBQUtFLE9BQVEsSUFBekMsR0FBK0MsRUFDaEQsSUFBR0YsS0FBS1MsS0FBTSxLQUFJVCxLQUFLVSxPQUFRLEVBRmhDOztBQUlBLFVBQUlWLEtBQUtXLElBQVQsRUFBZTtBQUNiLGVBQVEsR0FBRUwsTUFBTyxJQUFHTSxLQUFLQyxTQUFMLENBQWViLEtBQUtXLElBQXBCLENBQTBCLEVBQTlDO0FBQ0Q7O0FBRUQsYUFBT0wsTUFBUDtBQUNELEtBVlksQ0FBYjs7QUFZQSxXQUFPUCxrQkFBUUosTUFBUixDQUFlbUIsT0FBZixDQUF1QmYsa0JBQVFKLE1BQVIsQ0FBZVksU0FBZixFQUF2QixFQUFtREgsSUFBbkQsQ0FBUDtBQUNEOztBQUVEWCxtQkFBaUJpQixPQUFqQixFQUEwQkMsSUFBMUIsRUFBZ0NULE9BQWhDLEVBQXlDO0FBQ3ZDLFFBQUlhLGFBQWE7QUFDZlAsV0FBSyxLQUFLWixPQURLO0FBRWZjLGVBQVNBO0FBRk0sS0FBakI7O0FBS0EsUUFBSUMsSUFBSixFQUFVO0FBQ1JJLGlCQUFXSixJQUFYLEdBQWtCQSxJQUFsQjtBQUNEOztBQUVELFFBQUlULE9BQUosRUFBYTtBQUNYYSxpQkFBV2IsT0FBWCxHQUFxQkEsT0FBckI7QUFDRDs7QUFFRCxXQUFPYSxVQUFQO0FBQ0Q7O0FBRURDLGNBQVk7QUFDVixVQUFNQyxhQUFhLEtBQUtkLGdCQUFMLEVBQW5CO0FBQ0EsVUFBTUwsZ0JBQWdCLEtBQUtBLGFBQUwsRUFBdEI7O0FBRUEsWUFBUSxLQUFLSCxNQUFiO0FBQ0UsV0FBSyxNQUFMO0FBQ0UsYUFBS0gsTUFBTCxDQUFZMEIsR0FBWixDQUNFLElBQUluQixrQkFBUW9CLFVBQVIsQ0FBbUJDLE9BQXZCLENBQStCO0FBQzdCekIsa0JBQVFJLGtCQUFRSixNQUFSLENBQWVtQixPQUFmLENBQ04sS0FBS2hCLGFBQUwsRUFETSxFQUVOQyxrQkFBUUosTUFBUixDQUFlWSxTQUFmLEVBRk0sRUFHTlIsa0JBQVFKLE1BQVIsQ0FBZTBCLElBQWYsRUFITTtBQURxQixTQUEvQixDQURGOztBQVVBO0FBQ0YsV0FBSyxRQUFMO0FBQ0UsYUFBSzdCLE1BQUwsQ0FBWTBCLEdBQVosQ0FDRSxJQUFJbkIsa0JBQVFvQixVQUFSLENBQW1CQyxPQUF2QixDQUErQjtBQUM3QnpCLGtCQUFRSSxrQkFBUUosTUFBUixDQUFlbUIsT0FBZixDQUNOLEtBQUtoQixhQUFMLEVBRE0sRUFFTkMsa0JBQVFKLE1BQVIsQ0FBZTJCLFFBQWYsRUFGTSxFQUdOdkIsa0JBQVFKLE1BQVIsQ0FBZTRCLE1BQWYsRUFITSxFQUlOTixVQUpNO0FBRHFCLFNBQS9CLENBREY7O0FBV0E7QUFDRjtBQUNFLGFBQUt6QixNQUFMLENBQVkwQixHQUFaLENBQ0UsSUFBSW5CLGtCQUFRb0IsVUFBUixDQUFtQkMsT0FBdkIsQ0FBK0I7QUFDN0J6QixrQkFBUUksa0JBQVFKLE1BQVIsQ0FBZW1CLE9BQWYsQ0FDTixLQUFLaEIsYUFBTCxFQURNLEVBRU5DLGtCQUFRSixNQUFSLENBQWUyQixRQUFmLEVBRk0sRUFHTnZCLGtCQUFRSixNQUFSLENBQWU0QixNQUFmLEVBSE0sRUFJTk4sVUFKTTtBQURxQixTQUEvQixDQURGO0FBM0JKO0FBc0NEO0FBOUZnQjs7a0JBaUdKNUIsWSIsImZpbGUiOiJmb3JtYXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2luc3RvbiBmcm9tIFwid2luc3RvblwiO1xuaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5cbmNsYXNzIEZvcm1hdExvZ2dlciB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHRoaXMubG9nZ2VyID0gcGFyYW1zLmxvZ2dlcjtcbiAgICB0aGlzLmxvZ2dlci5sb2dNZXNzYWdlRm9ybWF0ID0gdGhpcy5sb2dNZXNzYWdlRm9ybWF0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5mb3JtYXQgPSBwYXJhbXMuZm9ybWF0O1xuICAgIHRoaXMuYXBwTmFtZSA9IHBhcmFtcy5hcHBOYW1lO1xuICAgIHRoaXMuZGVidWdDb250ZXh0ID0gcGFyYW1zLmRlYnVnQ29udGV4dDtcbiAgfVxuXG4gIGZpbHRlckNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHdpbnN0b24uZm9ybWF0KChpbmZvLCBvcHRzKSA9PiB7XG4gICAgICBpZiAodGhpcy5kZWJ1Z0NvbnRleHQgIT09IG51bGwgJiYgaW5mby5jb250ZXh0ICE9PSB0aGlzLmRlYnVnQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH0pKCk7XG4gIH1cblxuICBzaW1wbGVCYXNlRm9ybWF0KCkge1xuICAgIGNvbnN0IGJhc2UgPSB3aW5zdG9uLmZvcm1hdC5wcmludGYoaW5mbyA9PiB7XG4gICAgICBjb25zdCBzdHJpbmcgPSBgJHttb21lbnQoaW5mby50aW1lc3RhbXApfSBbJHtpbmZvLmFwcH1dICR7XG4gICAgICAgIGluZm8uY29udGV4dCA/IGBbY29udGV4dDogJHtpbmZvLmNvbnRleHR9XX1gIDogXCJcIlxuICAgICAgfSAke2luZm8ubGV2ZWx9OiAke2luZm8ubWVzc2FnZX1gO1xuXG4gICAgICBpZiAoaW5mby5kYXRhKSB7XG4gICAgICAgIHJldHVybiBgJHtzdHJpbmd9ICR7SlNPTi5zdHJpbmdpZnkoaW5mby5kYXRhKX1gO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHdpbnN0b24uZm9ybWF0LmNvbWJpbmUod2luc3Rvbi5mb3JtYXQudGltZXN0YW1wKCksIGJhc2UpO1xuICB9XG5cbiAgbG9nTWVzc2FnZUZvcm1hdChtZXNzYWdlLCBkYXRhLCBjb250ZXh0KSB7XG4gICAgbGV0IGxvZ01lc3NhZ2UgPSB7XG4gICAgICBhcHA6IHRoaXMuYXBwTmFtZSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9O1xuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGxvZ01lc3NhZ2UuZGF0YSA9IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIGxvZ01lc3NhZ2UuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ01lc3NhZ2U7XG4gIH1cblxuICBzZXRGb3JtYXQoKSB7XG4gICAgY29uc3Qgc2ltcGxlQmFzZSA9IHRoaXMuc2ltcGxlQmFzZUZvcm1hdCgpO1xuICAgIGNvbnN0IGZpbHRlckNvbnRleHQgPSB0aGlzLmZpbHRlckNvbnRleHQoKTtcblxuICAgIHN3aXRjaCAodGhpcy5mb3JtYXQpIHtcbiAgICAgIGNhc2UgXCJqc29uXCI6XG4gICAgICAgIHRoaXMubG9nZ2VyLmFkZChcbiAgICAgICAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgICAgICAgZm9ybWF0OiB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKFxuICAgICAgICAgICAgICB0aGlzLmZpbHRlckNvbnRleHQoKSxcbiAgICAgICAgICAgICAgd2luc3Rvbi5mb3JtYXQudGltZXN0YW1wKCksXG4gICAgICAgICAgICAgIHdpbnN0b24uZm9ybWF0Lmpzb24oKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2ltcGxlXCI6XG4gICAgICAgIHRoaXMubG9nZ2VyLmFkZChcbiAgICAgICAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgICAgICAgZm9ybWF0OiB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKFxuICAgICAgICAgICAgICB0aGlzLmZpbHRlckNvbnRleHQoKSxcbiAgICAgICAgICAgICAgd2luc3Rvbi5mb3JtYXQuY29sb3JpemUoKSxcbiAgICAgICAgICAgICAgd2luc3Rvbi5mb3JtYXQuc2ltcGxlKCksXG4gICAgICAgICAgICAgIHNpbXBsZUJhc2VcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5sb2dnZXIuYWRkKFxuICAgICAgICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuQ29uc29sZSh7XG4gICAgICAgICAgICBmb3JtYXQ6IHdpbnN0b24uZm9ybWF0LmNvbWJpbmUoXG4gICAgICAgICAgICAgIHRoaXMuZmlsdGVyQ29udGV4dCgpLFxuICAgICAgICAgICAgICB3aW5zdG9uLmZvcm1hdC5jb2xvcml6ZSgpLFxuICAgICAgICAgICAgICB3aW5zdG9uLmZvcm1hdC5zaW1wbGUoKSxcbiAgICAgICAgICAgICAgc2ltcGxlQmFzZVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1hdExvZ2dlcjtcbiJdfQ==