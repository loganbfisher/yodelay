"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _winston = require("winston");

var _winston2 = _interopRequireDefault(_winston);

var _slackNotify = require("slack-notify");

var _slackNotify2 = _interopRequireDefault(_slackNotify);

var _urlParse = require("url-parse");

var _urlParse2 = _interopRequireDefault(_urlParse);

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

var _uncaught_exception = require("./transports/uncaught_exception");

var _uncaught_exception2 = _interopRequireDefault(_uncaught_exception);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Yodelay {
  constructor(params) {
    this.slackUrl = params.slackUrl;
    this.level = params.level || "debug";
    this.format = params.format;
    this.slack = (0, _slackNotify2.default)(this.slackUrl);
    this.channel = params.channel;
    this.appName = params.appName;
    this.kibanaUrl = params.kibanaUrl;
    this.alertOnError = params.alertOnError || true;
  }

  initialize() {
    const group = _winston2.default.createLogger({
      level: this.level
    });

    _winston2.default.loggers.add(this.appName, group);

    const logger = _winston2.default.loggers.get(this.appName);

    this.setFormat(logger);

    this.logger = logger;

    this.logger.error = this.error;
    this.logger.info = this.info;
    this.logger.debug = this.debug;
    this.logger.buildKibanaUrl = this.buildKibanaUrl;
    this.logger.slack = this.slack;
    this.logger.appName = this.appName;
    this.logger.kibanaUrl = this.kibanaUrl;
    this.logger.channel = this.channel;
    this.logger.alertOnError = this.alertOnError;
    this.logger.level = this.level;

    logger.exceptions.handle(new _uncaught_exception2.default({
      logger: this.logger
    }));

    return this.logger;
  }

  debug(msg) {
    if (this.level === "error" || this.level === "debug") {
      this.log({ app: this.appName, message: msg, level: "debug" });
    }
  }

  info(msg) {
    this.log({ app: this.appName, message: msg, level: "info" });
  }

  error(err) {
    if (this.level === "error" || this.level === "debug") {
      this.log({ app: this.appName, message: err, level: "error" });
    }

    if (process.env.NODE_ENV !== "development" && this.alertOnError) {
      this.slack.send({
        channel: this.channel,
        text: `:warning: Error Happened ${(0, _moment2.default)().calendar()}`,
        fields: {
          Application: this.appName,
          "Error Message": err,
          ":chart_with_upwards_trend: Kibana Url": this.buildKibanaUrl(this.kibanaUrl, (0, _moment2.default)())
        }
      });
    }
  }

  buildKibanaUrl(url, time) {
    const dateFrom = time.subtract(1, "minute").format();
    const dateTo = time.add(1, "minute").format();

    return `${url}#/discover?_g=(refreshInterval:(display:Off,pause:!f,value:0),time:(from:${dateFrom},mode:absolute,to:${dateTo}))&_a=(columns:!(_source),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,negate:!f,params:(query:${this.appName},type:phrase),type:phrase,value:${this.appName}))),interval:auto,query:(language:lucene,query:'Unhandled%20Rejection'),sort:!('@timestamp',desc))`;
  }

  simpleBaseFormat() {
    const base = _winston2.default.format.printf(function (info) {
      return `${info.timestamp} [${info.app}] ${info.level}: ${info.message}`;
    });

    return _winston2.default.format.combine(_winston2.default.format.timestamp(), base);
  }

  setFormat(logger) {
    const simpleBase = this.simpleBaseFormat();

    switch (this.format) {
      case "json":
        logger.add(new _winston2.default.transports.Console({
          format: _winston2.default.format.combine(_winston2.default.format.timestamp(), _winston2.default.format.json())
        }));

        break;
      case "simple":
        logger.add(new _winston2.default.transports.Console({
          format: _winston2.default.format.combine(_winston2.default.format.colorize(), _winston2.default.format.simple(), simpleBase)
        }));

        break;
      default:
        logger.add(new _winston2.default.transports.Console({
          format: _winston2.default.format.combine(_winston2.default.format.colorize(), _winston2.default.format.simple(), simpleBase)
        }));
    }
  }
}

exports.default = Yodelay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,